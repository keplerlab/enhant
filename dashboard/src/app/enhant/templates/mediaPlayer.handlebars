<style>

.player {
  position: relative;
  font-size: 0;
  overflow: hidden;
  padding-right: 0px;
  padding-left: 0px;
}

.player__button {
  background:none;
  border:0;
  line-height:1;
  color:white;
  text-align: center;
  outline:0;
  padding: 0;
  cursor:pointer;
  max-width:50px;
}

.player__controls {
  position: absolute;
  width: 100%;
  height: 50px;
  transition:all .3s;   
  flex-wrap:wrap;
  background:rgba(0,0,0,0.1);
  margin-top: -50px;
}

.progress {
  flex:10;
  position: relative;
  display:flex;
  flex-basis:100%;
  margin-bottom: 0px;
  height:16px;
  transition:height 0.3s;
  background:white;
  border-radius:15px;
  border:2px solid white;
  padding-left: 0px;
  padding-right: 0px;
  cursor:pointer;
  margin-top: 8px;
}

.progress__filled {
  width:50%;
  background:#1E90FF;
  flex:0;
  flex-basis:0.5%;
}

.markers{
    margin-top: -70px;
    display: flex;
    height: 20px;
    overflow: hidden;
}

.progress__time{
    color: white;
    font-family: "Inter-Regular";
    font-size: 16px;
    margin-top:4px;
}

.settings-container{
    background-color: white;
    color: black;
    font-family: "Inter-Regular";
    font-size: 14px;
    border-radius: 4px;
    width: 264px;
    height:102px;
    position: absolute;
    right: 10px;
    bottom:75px;
}
.sentiment-engagement-chart-video{
    height: 100px;
    margin-top: -180px;
    padding-left: 0px;
    padding-right: 0px;
}

.progress__line{
    height:155px;
    z-index:99999;
    bottom: 26px;
    position: absolute;
    border: 1px solid white;
    margin-top: -150px;
}

</style>

<div class="row">
    <div class="col-xs-12 player">
        <video width="100%" height="100%" class="viewer" id="recording-video" src="{{url}}"></video>

        <div class="settings-container" state="inactive" style="display: none;">
            <div class="clearfix">
                <div class="form-group" style="margin-top:4%;margin-bottom:4%;">
                    <div class="col-xs-10">
                        <div class="form-check">
                            <input class="form-check-input custom-checkbox" type="checkbox" id="show-metrics" checked>
                            <label class="form-check-label" for="show-metrics">
                            Show call metrics
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="clearfix">
                <div class="form-group" style="margin-top:4%;margin-bottom:4%;">
                    <label  style="margin-top:6px;" class="col-xs-5 col-form-label" for="setting-time-offset">Time offset: </label>
                    <div class="col-xs-5" style="padding-left: 0px;padding-right:0px;">
                        <input id="setting-time-offset" placeholder="hh:mm:ss" type="text" class="form-control">
                    </div>

                    <img id="video-settings-apply" style="cursor:pointer;margin-left:8px;margin-top:6px" width="24" height="24" src="public/img/check.svg">
                </div>
            </div>
        </div>
        
        {{#if chart}}
        <div class="sentiment-engagement-chart-video col-xs-8 col-xs-offset-1"></div>
        {{/if}}

        <div class="clearfix vertical-line-container">
            <div class="col-xs-8 col-xs-offset-1" style="padding-right:0px;padding-left:0px">
                <div class="progress__line"></div>
            </div>
        </div>

        <div class="clearfix marker-container">
            <div class="markers col-xs-8 col-xs-offset-1"></div>
        </div>

        <div class="player__controls clearfix">
            <icon style="cursor: pointer;text-align:center" class="toggle col-xs-1">
                <img width="32" height="32" src="public/img/play.svg">
            </icon>
            <div class="progress col-xs-8">
                <div class="progress__filled"></div>
            </div>

            <div class="col-xs-2 progress__time">
                <span class="progress__time__current_time">00:00:00</span>
                <span> / </span>
                <span class="progress__time__duration">00:00:00</span>
            </div>

            <div class="col-xs-1">
                <icon class="video-settings" style="cursor:pointer; text-align:center;" inactive>
                    <img width="20" height="30" src="public/img/settings.svg">
                </icon>
            </div>
        </div>
    </div>
</div>

<script>
    class MediaPlayer{
        constructor(conf){

            this.pause_icon = "public/img/play.svg";
            this.play_icon = "public/img/stop.svg";

            this.conf = conf;

            this.player = document.querySelector('.' + this.conf.player_cls);
            this.video = this.player.querySelector('.' + this.conf.video_cls);
            this.progress_container = this.player.querySelector('.' + this.conf.progress_container_cls);
            this.progress_filled_container = this.player.querySelector('.' + this.conf.progress_filled_container_cls);
            this.toggle_icon = this.player.querySelector('.' + this.conf.toggle_cls); 
            this.marker_cls = this.player.querySelector('.' + this.conf.marker_cls);

            this.settings_icon = $('.' + this.conf.settings.icon_cls);
            this.settings_icon_container = $("." + this.conf.settings.container_cls);
            this.settings_icon_time_offset = $("#" + this.conf.settings.offset_id);
            this.settings_icon_show_metric = $("#" + this.conf.settings.metric_id);
            this.settings_apply_icon = $("#" + this.conf.settings.apply_icon);

            this.settings_offset_value = "";
            this.show_metrics = true;
        }

        getVideo(){
            return this.video;
        }

        settingsToggle(){
            var current_state = this.settings_icon_container.attr("state");
            if (current_state == "active"){
                this.settings_icon_container.hide();
                this.settings_icon_container.attr("state", "inactive");
            }
            else {
                this.settings_icon_container.show();
                this.settings_icon_container.attr("state", "active");
            }
        }

        play(){
            this.video.play();
        }

        pause(){
            this.video.pause();
        }

        updatePlayPauseButtonIcon(play){

            if (play){
                $('.' + this.conf.toggle_cls + " img").attr("src", this.play_icon);
            }
            else{
                $('.' + this.conf.toggle_cls + " img").attr("src", this.pause_icon);
            }
        }

        togglePlay(){

            if (this.video.paused){
                this.play();
                this.updatePlayPauseButtonIcon(true);
            }
            else{
                this.pause();
                this.updatePlayPauseButtonIcon(false);
            }
        }

        formatTime(seconds){
            var diff = seconds;
            var ss = diff % 60;
            diff = (diff - ss) / 60;
            var mm = diff % 60;
            diff = (diff - mm) / 60;
            var hh = diff % 24;

            var formatted_hh = ("0" + hh).slice(-2).toString();
            var formatted_mm = ("0" + mm).slice(-2).toString();
            var formatted_ss = ("0" + Math.round(ss)).slice(-2).toString();

            return formatted_hh + ":" + formatted_mm + ":" + formatted_ss;
           
        }

        moveProgressLine(percent){
            $('.' + this.conf.progress__line).css("left", percent + "%");
        }

        progressClickedHandler(e){
            const scrubTime = (e.offsetX / this.progress_container.offsetWidth) * this.video.duration;
            this.video.currentTime = scrubTime;

            const percent = (this.video.currentTime / this.video.duration) * 100; 
            this.moveProgressLine(percent);
            this.showVideoCurrentTime();
        }

        videoTimeUpdated(){
            const percent = (this.video.currentTime / this.video.duration) * 100; 
            this.progress_filled_container.style.flexBasis = `${percent}%`;

            this.moveProgressLine(percent);
            this.showVideoCurrentTime();
        }

        showVideoCurrentTime(){
            var formated_current_time = this.formatTime(this.video.currentTime);
            $('.'+ this.conf.progress__time__current_time).text(formated_current_time);
        }

        showVideoDuration(){
            var formated_duration = this.formatTime(this.video.duration);
            $('.'+ this.conf.progress__time__duration).text(formated_duration);
        }

        addMarkersOnProgressBar(zip){
            var _this = this;
            var all_notes = zip.notes;
            all_notes.forEach(function(note){

                var seconds_elapsed = (note.event_time - zip.start_time) / 1000 ;

                if (seconds_elapsed < zip.end_time){
                    var positionToPlace = (seconds_elapsed / _this.video.duration) * 100 + '%';

                    var img_src = "public/img/";

                    if (note.type == "bookmark"){
                        img_src += "bookmark.svg";
                    }
                    else if (note.type == "image"){
                        img_src += "capture.svg";
                    }
                    else{
                        img_src += "notes.svg";
                    }

                    // create a div
                    var html = "<div style='position:absolute;left:"+ positionToPlace +"'><img src='" + img_src + "'</div>";

                    var el = $('.' + _this.conf.marker_cls);
                    el.append(html);
                }
            });
        }

        videoEnded(){
           $('.' + this.conf.toggle_cls + " img").attr("src", this.pause_icon);
        }

        registerSettingsEvents(){
            var _this = this;
            this.settings_icon.on("click", function(evt){
                _this.settingsToggle();
            });

            this.settings_apply_icon.on("click", function(evt){

            });
        }

        registerEvents(){
            var _this = this;
            this.video.addEventListener("click", _this.togglePlay.bind(_this));
            this.toggle_icon.addEventListener("click", _this.togglePlay.bind(_this));
            this.video.addEventListener("timeupdate", _this.videoTimeUpdated.bind(_this));
            this.video.addEventListener("ended", _this.videoEnded.bind(_this));
            this.progress_container.addEventListener("click", _this.progressClickedHandler.bind(_this));

            if (this.conf.settings){
                this.registerSettingsEvents();
            }
        }

        getChartConfig(){
            var config = {
                xAxes: [{
                    type: 'time',
                    gridLines: {
                        display: false
                    },
                    ticks: {
                        display: false
                    }
                }],
                yAxes: [{
                    gridLines: {
                        display: false
                    },
                    ticks: {
                        display: false
                    }
                }]
            };
            return config;
        }

        renderChartOnVideo(zip_data){
            const chartConf = this.getChartConfig();
            const canvasStyle = {
                "background-color": "rgb(255,255,255,0.4)"
            }
            const chartTemplate = Handlebars.templates.chart;
            const chart_html = chartTemplate({});
            $('.' + this.conf.chart_container_cls).append(chart_html);

            var event = new CustomEvent("createChart", {
                    detail: {zip: zip_data, config: chartConf, style: canvasStyle}
            });
            window.dispatchEvent(event);
        }
    }

    window.addEventListener("initializePlayer", function(evt){
        var data = evt.detail;
        var conf = {
            player_cls: "player",
            video_cls: "viewer",
            progress_container_cls: "progress",
            progress_filled_container_cls: "progress__filled",
            toggle_cls: "toggle",
            marker_cls: "markers",
            progress__time__duration: "progress__time__duration",
            progress__time__current_time: "progress__time__current_time",
            progress__line: "progress__line",
            settings: {
                icon_cls: "video-settings",
                container_cls: "settings-container",
                offset_id: "setting-time-offset",
                metric_id: "show-metrics",
                apply_icon: "video-settings-apply"
            },
            chart_container_cls: "sentiment-engagement-chart-video"
        };
        
        const player = new MediaPlayer(conf);
        player.registerEvents();

        var zip_data = data.zip;

        player.renderChartOnVideo(zip_data);

        if (!isEmpty(zip_data)){
            var video = player.getVideo();
            video.onloadedmetadata = function(){
                player.showVideoDuration();
                player.addMarkersOnProgressBar(zip_data);
                delete player;
            }
        }
        else{
             delete player;
        }
    });
  
</script>
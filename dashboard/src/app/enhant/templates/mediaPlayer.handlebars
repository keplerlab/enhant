<style>

.player {
  position: relative;
  font-size: 0;
  overflow: hidden;
  padding-right: 0px;
  padding-left: 0px;
}

.player__button {
  background:none;
  border:0;
  line-height:1;
  color:white;
  text-align: center;
  outline:0;
  padding: 0;
  cursor:pointer;
  max-width:50px;
}

.player__controls {
  position: absolute;
  width: 100%;
  height: 50px;
  transition:all .3s;   
  flex-wrap:wrap;
  background:rgba(0,0,0,0.1);
  margin-top: -50px;
}

.progress {
  flex:10;
  position: relative;
  display:flex;
  flex-basis:100%;
  margin-bottom: 0px;
  height:16px;
  transition:height 0.3s;
  background:white;
  border-radius:15px;
  border:2px solid white;
  padding-left: 0px;
  padding-right: 0px;
  cursor:pointer;
  margin-top: 8px;
}

.progress__filled {
  width:50%;
  background:#1E90FF;
  flex:0;
  flex-basis:0.5%;
}

.markers{
    margin-top: -70px;
    display: flex;
    height: 20px;
    overflow: hidden;
}

.progress__time{
    color: white;
    font-family: "Inter-Regular";
    font-size: 16px;
    margin-top:4px;
}

.settings-container{
    background-color: white;
    color: black;
    font-family: "Inter-Regular";
    font-size: 14px;
    border-radius: 4px;
    width: 264px;
    height:102px;
    position: absolute;
    right: 10px;
    bottom:75px;
}
.sentiment-engagement-chart-video{
    height: 100px;
    margin-top: -180px;
    padding-left: 0px;
    padding-right: 0px;
}

.progress__line{
    height:155px;
    z-index:99999;
    bottom: 26px;
    position: absolute;
    border: 1px solid white;
    margin-top: -150px;
}

.settings-with-error{
    height:140px;
}

.offset-error-msg{
    font-family: "Inter-Bold";
    font-size: 14px;
    color: #1E90FF;
    display: none;
}

</style>

<div class="row">
    <div class="col-xs-12 player">
        <video width="100%" height="100%" class="viewer" id="recording-video" src="{{url}}"></video>

        <div class="settings-container" state="inactive" style="display: none;">
            <div class="clearfix">
                <div class="col-xs-12" style="margin-top: 5px;">
                    <span class="offset-error-msg"></span>
                </div>
            </div>
            <div class="clearfix">
                <div class="form-group" style="margin-top:4%;margin-bottom:4%;">
                    <div class="col-xs-10">
                        <div class="form-check">
                            <input class="form-check-input custom-checkbox" type="checkbox" id="show-metrics" checked>
                            <label class="form-check-label" for="show-metrics">
                            Show call metrics
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="clearfix">
                <div class="form-group" style="margin-top:4%;margin-bottom:4%;">
                    <label  style="margin-top:6px;" class="col-xs-5 col-form-label" for="setting-time-offset">Time offset: </label>
                    <div class="col-xs-5" style="padding-left: 0px;padding-right:0px;">
                        <input id="setting-time-offset" placeholder="hh:mm:ss" type="text" class="form-control">
                    </div>

                    <img id="video-settings-apply" style="cursor:pointer;margin-left:8px;margin-top:6px" width="24" height="24" src="public/img/check.svg">
                </div>
            </div>
        </div>
        
        {{#if chart}}
        <div class="sentiment-engagement-chart-video col-xs-8 col-xs-offset-1"></div>
        {{/if}}

        <div class="clearfix vertical-line-container">
            <div class="col-xs-8 col-xs-offset-1" style="padding-right:0px;padding-left:0px">
                <div class="progress__line"></div>
            </div>
        </div>

        <div class="clearfix marker-container">
            <div class="markers col-xs-8 col-xs-offset-1"></div>
        </div>

        <div class="player__controls clearfix">
            <icon style="cursor: pointer;text-align:center" class="toggle col-xs-1">
                <img width="32" height="32" src="public/img/play.svg">
            </icon>
            <div class="progress col-xs-8">
                <div class="progress__filled"></div>
            </div>

            <div class="col-xs-2 progress__time">
                <span class="progress__time__current_time">00:00:00</span>
                <span> / </span>
                <span class="progress__time__duration">00:00:00</span>
            </div>

            <div class="col-xs-1">
                <icon class="video-settings" style="cursor:pointer; text-align:center;" inactive>
                    <img width="20" height="30" src="public/img/settings.svg">
                </icon>
            </div>
        </div>
    </div>
</div>

<script>
    class MediaPlayer{
        constructor(conf){

            this.pause_icon = "public/img/play.svg";
            this.play_icon = "public/img/stop.svg";

            this.zip_data = {};

            this.conf = conf;

            this.player = document.querySelector('.' + this.conf.player_cls);
            this.video = this.player.querySelector('.' + this.conf.video_cls);
            this.progress_container = this.player.querySelector('.' + this.conf.progress_container_cls);
            this.progress_filled_container = this.player.querySelector('.' + this.conf.progress_filled_container_cls);
            this.toggle_icon = this.player.querySelector('.' + this.conf.toggle_cls); 
            this.marker_cls = this.player.querySelector('.' + this.conf.marker_cls);

            this.settings_icon = $('.' + this.conf.settings.icon_cls);
            this.settings_icon_container = $("." + this.conf.settings.container_cls);
            this.settings_apply_icon = $("#" + this.conf.settings.apply_icon);

            this.show_metrics = true;
            this.recording_start_time = null;

            // negative offset means recording started before plugin and positive otherwise
            this.offset = 0; // 0 is no offset, -1 is negative offset, +1 is positive offset
            this.offset_in_ms = 0;
        }

        setZipData(zip_data){
            this.zip_data = zip_data;
        }

        getVideo(){
            return this.video;
        }

        settingsToggle(){
            var current_state = this.settings_icon_container.attr("state");
            if (current_state == "active"){
                this.settings_icon_container.hide();
                this.settings_icon_container.attr("state", "inactive");
            }
            else {
                this.settings_icon_container.show();
                this.settings_icon_container.attr("state", "active");
            }
        }

        play(){
            this.video.play();
        }

        pause(){
            this.video.pause();
        }

        updatePlayPauseButtonIcon(play){

            if (play){
                $('.' + this.conf.toggle_cls + " img").attr("src", this.play_icon);
            }
            else{
                $('.' + this.conf.toggle_cls + " img").attr("src", this.pause_icon);
            }
        }

        togglePlay(){

            if (this.video.paused){
                this.play();
                this.updatePlayPauseButtonIcon(true);
            }
            else{
                this.pause();
                this.updatePlayPauseButtonIcon(false);
            }
        }

        formatTime(seconds){
            var diff = seconds;
            var ss = diff % 60;
            diff = (diff - ss) / 60;
            var mm = diff % 60;
            diff = (diff - mm) / 60;
            var hh = diff % 24;

            var formatted_hh = ("0" + hh).slice(-2).toString();
            var formatted_mm = ("0" + mm).slice(-2).toString();
            var formatted_ss = ("0" + Math.round(ss)).slice(-2).toString();

            return formatted_hh + ":" + formatted_mm + ":" + formatted_ss;
           
        }

        moveProgressLine(percent){
            $('.' + this.conf.progress__line).css("left", percent + "%");
        }

        progressClickedHandler(e){
            const scrubTime = (e.offsetX / this.progress_container.offsetWidth) * this.video.duration;
            this.video.currentTime = scrubTime;

            const percent = (this.video.currentTime / this.video.duration) * 100; 
            this.moveProgressLine(percent);
            this.showVideoCurrentTime();
        }

        videoTimeUpdated(){
            const percent = (this.video.currentTime / this.video.duration) * 100; 
            this.progress_filled_container.style.flexBasis = `${percent}%`;

            this.moveProgressLine(percent);
            this.showVideoCurrentTime();
        }

        showVideoCurrentTime(){
            var formated_current_time = this.formatTime(this.video.currentTime);
            $('.'+ this.conf.progress__time__current_time).text(formated_current_time);
        }

        showVideoDuration(){
            var formated_duration = this.formatTime(this.video.duration);
            $('.'+ this.conf.progress__time__duration).text(formated_duration);
        }

        addMarkersOnProgressBar(){
            var _this = this;
            var el = $('.' + _this.conf.marker_cls);

            // clear previous markers
            el.html("");
    
            var _this = this;
            var all_notes = this.zip_data.notes;
            all_notes.forEach(function(note){

                var seconds_elapsed = (note.event_time - _this.recording_start_time) / 1000 ;

                // only render those between the recording duration
                if (seconds_elapsed >= 0 && seconds_elapsed <= _this.video.duration){
                    var positionToPlace = (seconds_elapsed / _this.video.duration) * 100 + '%';
                    var img_src = "public/img/";

                    if (note.type == "bookmark"){
                        img_src += "bookmark.svg";
                    }
                    else if (note.type == "image"){
                        img_src += "capture.svg";
                    }
                    else{
                        img_src += "notes.svg";
                    }

                    // create a div
                    var html = "<div style='position:absolute;left:"+ positionToPlace +"'><img src='" + img_src + "'</div>";

                    el.append(html);
                }
            });
        }

        videoEnded(){
           $('.' + this.conf.toggle_cls + " img").attr("src", this.pause_icon);
        }

        getCallMetricCheckboxStatus(){
            var status = $("#" + this.conf.settings.metric_id + ":checkbox:checked").length > 0;
            return status;
        }

        hideChartsContainer(){
            $('.' + this.conf.chart_container_cls).hide();
            $('.' + this.conf.progress__line).hide();
        }

        showChartsContainer(){
            $('.' + this.conf.chart_container_cls).show();
            $('.' + this.conf.progress__line).show();
        }

        calculateOffsetInMilliSeconds(hh, mm, ss){
            var offset_in_ms = (hh*60*60 + mm * 60 + ss) * 1000;
            this.offset_in_ms = offset_in_ms;
        }

        setRecordingStartTime(){

            // recording initially should be the same as meeting start because
            // we are not doing relative movement (to the previous one)
            this.recording_start_time = this.zip_data.start_time;

            if (this.offset == -1){
                this.recording_start_time = this.zip_data.start_time - this.offset_in_ms;
            }
            else if (this.offset == 1){
                this.recording_start_time = this.zip_data.start_time + this.offset_in_ms;
            }
            else{
                this.recording_start_time = this.zip_data.start_time;
            }

        }


        updateNotesData(){
            var notes = this.zip_data.notes;
            var updated_notes = [];

            var _this = this;
            notes.forEach(function(nd){

                var event_time;

                if (_this.offset == 1){
                    event_time = nd.event_time - _this.offset_in_ms;
                }
                else if (_this.offset == -1){
                    event_time =  nd.event_time + _this.offset_in_ms;
                }
                else{
                    event_time = nd.event_time;
                }

                var obj = {
                    event_time: event_time,
                    type: nd.type,
                    content: nd.content
                }
               
                updated_notes.push(obj);
            });

            return updated_notes;
        }

        updateQuestionsAskedData(){
            var questionsAsked = this.zip_data.questionsAsked;
            var updated_questions = [];

            var _this = this;
            questionsAsked.forEach(function(qd){
                var time;
                if (_this.offset == 1){
                    time = qd.time - _this.offset_in_ms;
                }
                else if (_this.offset == -1){
                    time =  qd.time + _this.offset_in_ms;
                }
                else{
                    time = qd.time;
                }

                var obj = {
                    origin: qd.origin,
                    time: time,
                    question: qd.question
                }

                updated_questions.push(obj);

            });

            return updated_questions;
        }

        filterData(data_arr, start_time){
            var _this = this;
            var filtered_arr = data_arr.filter(function(d){
                return ((start_time + d[0]) >= _this.recording_start_time);
            });

            return filtered_arr;
        }

        addEmptyData(data_arr, start_time, is_engagement, add){

            var _this = this;
            var new_arr = [];

            var sampleRate_in_ms = 1*1000; //1 sec
            var count = 1;

            var current_time = this.recording_start_time;

            if (add){

                // add null samples till current time doesnt reach meeting start time
                while(current_time < start_time){

                    var time_in_ms = count*sampleRate_in_ms;

                    current_time = this.recording_start_time + time_in_ms;

                    if (is_engagement){
                        new_arr.push([time_in_ms, null]);
                    }
                    else{
                        new_arr.push([time_in_ms, null, null]);
                    }
                    
                    count += 1;
                }
            }
            var updated_time_arr = [];

            data_arr.forEach(function(d){
                var item = [];
                item[0] = d[0] + _this.offset_in_ms;
                item[1] = d[1];

                if (!is_engagement){
                    item[2] = d[2];
                }

                updated_time_arr.push(item);
            });

            // add remaining data arr
            new_arr.push(...updated_time_arr);

            return new_arr;
        }
        
        checkOffsetDurationRight(){
            
            // check if offset duration is correct
            if (this.offset_in_ms >= (this.video.duration * 1000)){
                return {
                    status: false,
                    msg: "Offset outside of video duration - Not Allowed"
                };
            }
            else{
                return {
                    status: true,
                    msg: ''
                };
            }
        }

        validateOffset(offset_string){

            var validated_offset_data = {
                status: true,
                msg: ''
            };

            var offset_arr = offset_string.split(":");

            if (offset_arr.length !== 3){
                validated_offset_data = {
                    status: false,
                    msg: "Entered offset format is incorrect. Valid format is hh:mm:ss"
                }

                return validated_offset_data;
            }
            else {
                var entered_hh = offset_arr[0];
                var entered_mm = offset_arr[1];
                var entered_ss = offset_arr[2];

                // 3 because it can have a negative sign
                if (entered_hh.length !== 3 && entered_hh.length !== 2){
                    validated_offset_data = {
                        status: false,
                        msg: "Hour offset is incorrect. Valid format is hh:mm:ss"
                    }

                    return validated_offset_data;
                }

                if (entered_hh.length === 3){

                    // only -ve sign allowed for hh when length is 3
                    if (entered_hh[0] !== "-"){
                        validated_offset_data = {
                            status: false,
                            msg: "Hour offset is incorrect. Valid format is hh:mm:ss"
                        }

                        return validated_offset_data;
                    }

                }

                if (entered_mm.length !== 2){
                    validated_offset_data = {
                        status: false,
                        msg: "Minute offset is incorrect. Valid format is hh:mm:ss"
                    }

                    return validated_offset_data;
                }

                if (entered_ss.length !== 2){
                    validated_offset_data = {
                        status: false,
                        msg: "Seconds offset is incorrect. Valid format is hh:mm:ss"
                    }

                    return validated_offset_data;
                }
            }

            return validated_offset_data;

        }

        showOffsetError(data){
            var _this = this;
            var error_msg = data.msg;

            // increase settings container height to 
            _this.settings_icon_container.addClass("settings-with-error");
            $('.' + _this.conf.settings.offset_error).show();
            $('.' + _this.conf.settings.offset_error).text(error_msg);

            setTimeout(function(){
                $('.' + _this.conf.settings.offset_error).text("");
                $('.' + _this.conf.settings.offset_error).hide();
                _this.settings_icon_container.removeClass("settings-with-error");
            }, 2000);

        }

        //TODO: add proper check for keys
        createNewZipData(){

            {{!-- console.log(" old zip ", this.zip_data); --}}
            var new_zip = {
                offset: this.offset,
                start_time: this.zip_data.start_time,
                end_time: this.zip_data.end_time,
                avgSentimentScoreGuest: this.zip_data.avgSentimentScoreGuest,
                avgSentimentScoreHost: this.zip_data.avgSentimentScoreHost,
                conv_id: this.zip_data.conv_id,
                meeting_id: this.zip_data.meeting_id,
                questionsAsked: this.updateQuestionsAskedData(),
                engagement_scores: {
                    avg_engagement_score: this.zip_data.engagement_scores.avg_engagement_score,
                    engagement_scores: []
                },
                highSentimentSentences: {
                    highSentimentSentencesHost: this.zip_data.highSentimentSentences.highSentimentSentencesHost,
                    highSentimentSentencesGuest: []
                },
                lowSentimentSentences: {
                    lowSentimentSentencesHost: this.zip_data.lowSentimentSentences.lowSentimentSentencesHost,
                    lowSentimentSentencesGuest: []
                },
                notes: this.updateNotesData()
            }

            if (this.offset == -1){
                var start_time = this.zip_data.start_time;
                var engagement_scores = this.addEmptyData(this.zip_data.engagement_scores.engagement_scores, start_time, true, true);
                var highSentimentSentencesGuest = this.addEmptyData(this.zip_data.highSentimentSentences.highSentimentSentencesGuest, start_time, false, true);
                var lowSentimentSentencesGuest = this.addEmptyData(this.zip_data.lowSentimentSentences.lowSentimentSentencesGuest, start_time, false, false);

                new_zip.engagement_scores.engagement_scores = engagement_scores;
                new_zip.highSentimentSentences.highSentimentSentencesGuest = highSentimentSentencesGuest;
                new_zip.lowSentimentSentences.lowSentimentSentencesGuest = lowSentimentSentencesGuest;

            }
            else if (this.offset == 1){
                var start_time = this.zip_data.start_time;
                var engagement_scores = this.filterData(this.zip_data.engagement_scores.engagement_scores, start_time);
                var highSentimentSentencesGuest = this.filterData(this.zip_data.highSentimentSentences.highSentimentSentencesGuest, start_time);
                var lowSentimentSentencesGuest = this.filterData(this.zip_data.lowSentimentSentences.lowSentimentSentencesGuest, start_time);

                new_zip.engagement_scores.engagement_scores = engagement_scores;
                new_zip.highSentimentSentences.highSentimentSentencesGuest = highSentimentSentencesGuest;
                new_zip.lowSentimentSentences.lowSentimentSentencesGuest = lowSentimentSentencesGuest;

            }
            else{
                new_zip = this.zip_data;
            }

            {{!-- console.log(" new zip ", new_zip); --}}

            return new_zip;
        }

        plotChart(zip_data){
            var new_zip = this.createNewZipData(zip_data);
            this.renderChartOnVideo(new_zip);
        }

        renderMarkers(zip_data){
            this.addMarkersOnProgressBar(zip_data);
        }

        processOffsetValue(offset_string){

            var processing_ok = false;

            var offset_validated_data =  this.validateOffset(offset_string);

            if (offset_validated_data.status){
                var offset_arr = offset_string.split(":");
                var entered_hh = offset_arr[0];
                var entered_mm = offset_arr[1];
                var entered_ss = offset_arr[2];

                var hh = ("0" + entered_hh).slice(-2);
                var mm = ("0" + entered_mm).slice(-2);
                var ss = ("0" + entered_ss).slice(-2);

                var hh_number = Number(offset_arr[0].slice(-2));
                var mm_number = Number(offset_arr[1].slice(-2));
                var ss_number = Number(offset_arr[2].slice(-2));

                if (entered_hh[0] == "-"){
                    this.offset = -1;
                }
                else{
                    if (hh_number > 0 || mm_number > 0 || ss_number > 0) {
                        this.offset = 1;
                    }
                    else{
                        this.offset = 0;
                    }
                }

                this.calculateOffsetInMilliSeconds(hh_number, mm_number, ss_number);
                var offset_duration_check_data = this.checkOffsetDurationRight();

                if (offset_duration_check_data.status){
                    processing_ok = true;
                }
                else{
                    this.showOffsetError(offset_duration_check_data);
                }

            }
            else{
                 this.showOffsetError(offset_validated_data);
            }

            return processing_ok;
        }

        registerSettingsEvents(){
            var _this = this;
            this.settings_icon.on("click", function(evt){
                _this.settingsToggle();
            });


            $('#' + _this.conf.settings.metric_id).change(function(){

                if (this.checked){
                    _this.showChartsContainer();
                }
                else{
                    _this.hideChartsContainer();
                }
            });

            this.settings_apply_icon.on("click", function(evt){

                // get the timeoffset
                var offset = $('#'+ _this.conf.settings.offset_id).val();

                if (offset){
                    var offset_ok = _this.processOffsetValue(offset);

                    // if only offset is valid
                    if (offset_ok){
                        _this.setRecordingStartTime();

                        var new_zip = _this.createNewZipData();
                        _this.plotChart(new_zip);
                        _this.addMarkersOnProgressBar();

                        // forward message to dashboard
                        var event = new CustomEvent("update-dashboard", {
                            detail: new_zip
                        });
                        window.dispatchEvent(event);
                    }
                }
            });
        }

        registerEvents(){
            var _this = this;
            this.video.addEventListener("click", _this.togglePlay.bind(_this));
            this.toggle_icon.addEventListener("click", _this.togglePlay.bind(_this));
            this.video.addEventListener("timeupdate", _this.videoTimeUpdated.bind(_this));
            this.video.addEventListener("ended", _this.videoEnded.bind(_this));
            this.progress_container.addEventListener("click", _this.progressClickedHandler.bind(_this));

            if (this.conf.settings){
                this.registerSettingsEvents();
            }
        }

        getChartConfig(){
            var config = {
                xAxes: [{
                    type: 'time',
                    gridLines: {
                        display: false
                    },
                    ticks: {
                        display: false
                    }
                }],
                yAxes: [{
                    gridLines: {
                        display: false
                    },
                    ticks: {
                        display: false
                    }
                }]
            };
            return config;
        }

        renderChartOnVideo(zip_data){
            $('.' + this.conf.chart_container_cls).html("");
            const chartConf = this.getChartConfig();
            const canvasStyle = {
                "background-color": "rgb(255,255,255,0.4)"
            }
            const chartTemplate = Handlebars.templates.chart;
            const chart_html = chartTemplate({});
            $('.' + this.conf.chart_container_cls).append(chart_html);

            var event = new CustomEvent("createChart", {
                    detail: {zip: zip_data, config: chartConf, style: canvasStyle}
            });
            window.dispatchEvent(event);
        }
    }

    window.addEventListener("initializePlayer", function(evt){
        var data = evt.detail;
        var conf = {
            player_cls: "player",
            video_cls: "viewer",
            progress_container_cls: "progress",
            progress_filled_container_cls: "progress__filled",
            toggle_cls: "toggle",
            marker_cls: "markers",
            progress__time__duration: "progress__time__duration",
            progress__time__current_time: "progress__time__current_time",
            progress__line: "progress__line",
            settings: {
                icon_cls: "video-settings",
                container_cls: "settings-container",
                offset_id: "setting-time-offset",
                offset_error: "offset-error-msg",
                metric_id: "show-metrics",
                apply_icon: "video-settings-apply"
            },
            chart_container_cls: "sentiment-engagement-chart-video"
        };

        var zip_data = data.zip;

        if (!isEmpty(zip_data)){

            const player = new MediaPlayer(conf);

            // set player zip data
            player.setZipData(zip_data);

            // set the recording start time (will match the meeting start time without offset)
            player.setRecordingStartTime();

            // register player events
            player.registerEvents();

            // render chart
            player.renderChartOnVideo(zip_data);

            var video = player.getVideo();

            // video is loaded, add duration data and markers
            video.onloadedmetadata = function(){
                player.showVideoDuration();
                player.addMarkersOnProgressBar();
                delete player;
            }
        }
        else{
             delete player;
        }

        window.removeEventListener("initializePlayer", function(evt){
            console.log(" initializePlayer event removed ");
        });
    });
  
</script>